{
	"name": "FraudPrediction",
	"properties": {
		"folder": {
			"name": "SparkMLServices"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool2021",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b2c45296-4462-47bb-b779-2d7528c82fb0"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/03766bec-6c31-4851-aa3c-233d9b60aeaf/resourceGroups/uiap-d-si-synapse/providers/Microsoft.Synapse/workspaces/uiap-synapse-claims-ws/bigDataPools/sparkpool2021",
				"name": "sparkpool2021",
				"type": "Spark",
				"endpoint": "https://uiap-synapse-claims-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool2021",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"#### Import necessary packages for Prediction using AutoML Run"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from azureml.train.automl.run import AutoMLRun\n",
					"from azureml.core import Experiment, Workspace, Dataset, Datastore\n",
					"from azureml.core.authentication import InteractiveLoginAuthentication, ServicePrincipalAuthentication\n",
					"from azureml.telemetry import INSTRUMENTATION_KEY\n",
					"\n",
					"from inference_schema.schema_decorators import input_schema, output_schema\n",
					"from inference_schema.parameter_types.numpy_parameter_type import NumpyParameterType\n",
					"from inference_schema.parameter_types.pandas_parameter_type import PandasParameterType\n",
					"from inference_schema.parameter_types.standard_py_parameter_type import StandardPythonParameterType\n",
					"import pandas as pd\n",
					"import numpy as np\n",
					"import json"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"source": [
					"#### Define credentials and input table to Read data"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"### Credentials\n",
					"driver = \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\n",
					"url = TokenLibrary.getSecret(\"ClaimsSolutionAIMLKV\", \"DSQLTargetJdbc\",\"ClaimsSolutionKV\")\n",
					"table = \"dbo.ClaimsSummary_ModelInput\""
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"source": [
					"#### Reading data using JDBC and loading as a Spark Dataframe"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df = spark.read.format(\"jdbc\")\\\n",
					"  .option(\"driver\", driver)\\\n",
					"  .option(\"url\", url)\\\n",
					"  .option(\"dbtable\", table)\\\n",
					"  .load()\n",
					"# Converting\n",
					"pandasdf = df.toPandas()"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"source": [
					"#### Drop Unnecessary Columns"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Drop unnecessary columns\n",
					"pandasdf.drop(['Claim_Date','ProcedureAmount','FullMemberName'], axis = 1, inplace = True)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"#### Categorize Input Data "
				]
			},
			{
				"cell_type": "code",
				"source": [
					"def bucketize(val, size, count):\n",
					"    i=0\n",
					"    for i in range(count):\n",
					"        if val <= (i+1)*size:\n",
					"            return i\n",
					"    return i\n",
					"\n",
					"pandasdf['Age_group'] = [bucketize(x, 10, 5) for x in pandasdf['Age']]    \n",
					"pandasdf['Claim_amt_grp'] = [bucketize(x, 1000, 200) for x in pandasdf['Claim_Amount']]"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"#### Define Credentials, workspace and Authentication for Prediction"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"subscription_id = \"03766bec-6c31-4851-aa3c-233d9b60aeaf\"\n",
					"resource_group = \"uiap-d-si-synapse\"\n",
					"workspace_name = \"az-synapse-hack-mlworkspac\"\n",
					"experiment_name = \"claimfrauddetection\"\n",
					"\n",
					"ws = Workspace(subscription_id = subscription_id, resource_group = resource_group, workspace_name = workspace_name)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"#### Get Latest Run and Best Model from ML Studio"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"experiment = ws.experiments[experiment_name]\n",
					"best_run = list(experiment.get_runs(type='automl'))[0]\n",
					"automl_run = AutoMLRun(experiment,run_id = best_run.id)\n",
					"run, model = automl_run.get_output()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"#### Define Input/Output Schemas for Prediction"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"input_sample = pd.DataFrame({\"Claim_FIR_No\": pd.Series([\"example_value\"], dtype=\"object\"), \"Claim_Type\": pd.Series([\"example_value\"], dtype=\"object\"), \"Hospitalization_Type\": pd.Series([\"example_value\"], dtype=\"object\"), \"Class_of_Accommodation\": pd.Series([\"example_value\"], dtype=\"object\"), \"Procedure\": pd.Series([\"example_value\"], dtype=\"object\"), \"Diagnosis\": pd.Series([\"example_value\"], dtype=\"object\"), \"PolicyNo\": pd.Series([\"example_value\"], dtype=\"object\"), \"Policy_Type\": pd.Series([\"example_value\"], dtype=\"object\"), \"member_code\": pd.Series([\"example_value\"], dtype=\"object\"), \"Gender\": pd.Series([\"example_value\"], dtype=\"object\"), \"Age\": pd.Series([0], dtype=\"int8\"), \"Hospital\": pd.Series([\"example_value\"], dtype=\"object\"), \"Corporate\": pd.Series([\"example_value\"], dtype=\"object\"), \"Length_of_Stay\": pd.Series([0], dtype=\"int16\"), \"Claim_Amount\": pd.Series([0], dtype=\"int32\"), \"HospitalCity\": pd.Series([\"example_value\"], dtype=\"object\"), \"HospitalState\": pd.Series([\"example_value\"], dtype=\"object\"), \"MemberCity\": pd.Series([\"example_value\"], dtype=\"object\"), \"MemberState\": pd.Series([\"example_value\"], dtype=\"object\"), \"Age_group\": pd.Series([0], dtype=\"int8\"), \"Claim_amt_grp\": pd.Series([0], dtype=\"int16\"), \"day\": pd.Series([0], dtype=\"int8\"), \"year\": pd.Series([0], dtype=\"int16\"), \"month\": pd.Series([0], dtype=\"int8\")})\n",
					"output_sample = np.array([0])\n",
					"method_sample = StandardPythonParameterType(\"predict\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"#### Define User Defined Function for Fraud Prediction"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"try:\n",
					"    @input_schema('method', method_sample, convert_to_provided_type=False)\n",
					"    @input_schema('data', PandasParameterType(input_sample))\n",
					"    @output_schema(NumpyParameterType(output_sample))\n",
					"    def run(data, method=\"predict\"):\n",
					"        try:\n",
					"            if method == \"predict_proba\":\n",
					"                result = model.predict_proba(data)\n",
					"            elif method == \"predict\":\n",
					"                result = model.predict(data)\n",
					"            else:\n",
					"                raise Exception(f\"Invalid predict method argument received ({method})\")\n",
					"            if isinstance(result, pd.DataFrame):\n",
					"                result = result.values\n",
					"            return result.tolist()\n",
					"        except Exception as e:\n",
					"            result = str(e)\n",
					"            return json.dumps({\"error\": result})\n",
					"except:\n",
					"    pass"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"#### Flag the claims using Custom Function"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"res = run(pandasdf)\n",
					"finalpdf = df.toPandas()\n",
					"finalpdf['IsMLFraudClaim'] = res\n",
					"sparkfinal = spark.createDataFrame(finalpdf)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"#### Write Predicted Output to Azure SQL Database using JDBC Connection"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"def writeto_sql(dataframe, tableName, jdbcConnection):\n",
					"    dataframe.write \\\n",
					"    .format(\"jdbc\") \\\n",
					"    .mode(\"overwrite\") \\\n",
					"    .option(\"url\", jdbcConnection) \\\n",
					"    .option(\"dbtable\", tableName) \\\n",
					"    .save()\n",
					"    print(\"Data Written Successfully\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"jdbcconnString = dbutils.secrets.get(scope = \"ai-ml-workathon-scope\", key = \"SQLTargetJdbc\")\n",
					"writeto_sql(sparkfinal, '[dbo].ClaimsFraudOutput', jdbcconnString)"
				],
				"execution_count": null
			}
		]
	}
}