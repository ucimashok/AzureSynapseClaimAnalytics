{
	"name": "FraudPrediction",
	"properties": {
		"folder": {
			"name": "SparkMLServices"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool2021",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "127de2f7-2ede-4fa6-a70c-545ba36b7d7f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/03766bec-6c31-4851-aa3c-233d9b60aeaf/resourceGroups/uiap-d-si-synapse/providers/Microsoft.Synapse/workspaces/uiap-synapse-claims-ws/bigDataPools/sparkpool2021",
				"name": "sparkpool2021",
				"type": "Spark",
				"endpoint": "https://uiap-synapse-claims-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool2021",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"#### Import necessary packages for Prediction using AutoML Run"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Import libraries\r\n",
					"from azureml.core import Workspace\r\n",
					"from azureml.core.model import Model\r\n",
					"import joblib"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"source": [
					"#### Define Credentials, workspace and Authentication for Prediction"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from notebookutils.mssparkutils import azureML\r\n",
					"# ws = azureML.getWorkspace(\"AzureMLServiceClaims\")\r\n",
					"subscription_id = \"03766bec-6c31-4851-aa3c-233d9b60aeaf\"\r\n",
					"resource_group = \"uiap-d-si-synapse\"\r\n",
					"workspace_name = \"az-synapse-hack-mlworkspace\"\r\n",
					"experiment_name = \"claimfrauddetection\"\r\n",
					"\r\n",
					"ws = Workspace(subscription_id = subscription_id, resource_group = resource_group, workspace_name = workspace_name)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"source": [
					"#### Define credentials and input table to Read data"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"### Credentials\n",
					"driver = \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\n",
					"url = TokenLibrary.getSecret(\"ClaimsSolutionAIMLKV\", \"DSQLTargetJdbc\",\"ClaimsSolutionKV\")\n",
					"table = \"dbo.[ClaimsSummary_ModelInput_New]\""
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"source": [
					"#### Reading data using JDBC and loading as a Spark Dataframe"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df = spark.read.format(\"jdbc\")\\\n",
					"  .option(\"driver\", driver)\\\n",
					"  .option(\"url\", url)\\\n",
					"  .option(\"dbtable\", table)\\\n",
					"  .load()\n",
					"# Converting\n",
					"pandasdf = df.toPandas()"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"source": [
					"#### Drop Unnecessary Columns"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Drop unnecessary columns\n",
					"pandasdf.drop(['Claim_Date','ProcedureAmount','FullMemberName'], axis = 1, inplace = True)\n",
					"pandasdf.rename(columns = {'Claim_amt_Grp':'Claim_amt_grp','Age_Group':'Age_group'}, inplace = True)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"model_path = Model.get_model_path(model_name=\"uiap-azure-ml-ws-fraud-detection-model-Best\", _workspace=ws)\r\n",
					"modeljob = joblib.load(model_path + \"/model.pkl\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"res=modeljob.predict(pandasdf)"
				],
				"execution_count": 9
			},
			{
				"cell_type": "markdown",
				"source": [
					"#### Flag the claims using Custom Function"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"finalpdf = df.toPandas()\n",
					"finalpdf['IsMLFraudClaim'] = res\n",
					"finalpdf = finalpdf[['IsMLFraudClaim','Claim_FIR_No']]\n",
					"# finalpdf.drop(['Claim_FIR_No','Claim_Type'],axis=1,inplace=True)\n",
					"sparkfinal = spark.createDataFrame(finalpdf)"
				],
				"execution_count": 22
			},
			{
				"cell_type": "markdown",
				"source": [
					"#### Write Predicted Output to Azure SQL Database using JDBC Connection"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"def writeto_sql(dataframe, tableName, jdbcConnection):\n",
					"    dataframe.write \\\n",
					"    .format(\"jdbc\") \\\n",
					"    .mode(\"overwrite\") \\\n",
					"    .option(\"url\", jdbcConnection) \\\n",
					"    .option(\"dbtable\", tableName) \\\n",
					"    .option(\"createTableColumnTypes\", \"Claim_FIR_No VARCHAR(30)\") \\\n",
					"    .save()\n",
					"    print(\"Data Written Successfully\")"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"source": [
					"jdbcconnString = TokenLibrary.getSecret(\"ClaimsSolutionAIMLKV\", \"DSQLTargetJdbc\",\"ClaimsSolutionKV\")\n",
					"writeto_sql(sparkfinal, 'dbo.ClaimsFraudOutput_Test', jdbcconnString)"
				],
				"execution_count": 31
			}
		]
	}
}